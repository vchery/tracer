{"version":3,"file":"OTLPMetricExporter.js","sourceRoot":"","sources":["../../src/OTLPMetricExporter.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,0FAGmD;AAEnD,oFAGgD;AAChD,sEAGyC;AAEzC,MAAM,uBAAwB,SAAQ,kDAGrC;IACC,YAAY,MAA+D;QACzE,KAAK,CACH,MAAM,EACN,4CAAyB,EACzB,sBAAsB,EACtB,iEAAiE,EACjE,SAAS,CACV,CAAC;IACJ,CAAC;CACF;AAED;;GAEG;AACH,MAAa,kBAAmB,SAAQ,mDAA+C;IACrF,YAAY,MAA+D;QACzE,KAAK,CAAC,IAAI,uBAAuB,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC,CAAC;IACrD,CAAC;CACF;AAJD,gDAIC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  OTLPMetricExporterBase,\n  OTLPMetricExporterOptions,\n} from '@opentelemetry/exporter-metrics-otlp-http';\nimport { ResourceMetrics } from '@opentelemetry/sdk-metrics';\nimport {\n  OTLPGRPCExporterConfigNode,\n  OTLPGRPCExporterNodeBase,\n} from '@opentelemetry/otlp-grpc-exporter-base';\nimport {\n  IExportMetricsServiceResponse,\n  ProtobufMetricsSerializer,\n} from '@opentelemetry/otlp-transformer';\n\nclass OTLPMetricExporterProxy extends OTLPGRPCExporterNodeBase<\n  ResourceMetrics,\n  IExportMetricsServiceResponse\n> {\n  constructor(config?: OTLPGRPCExporterConfigNode & OTLPMetricExporterOptions) {\n    super(\n      config,\n      ProtobufMetricsSerializer,\n      'MetricsExportService',\n      '/opentelemetry.proto.collector.metrics.v1.MetricsService/Export',\n      'METRICS'\n    );\n  }\n}\n\n/**\n * OTLP-gRPC metric exporter\n */\nexport class OTLPMetricExporter extends OTLPMetricExporterBase<OTLPMetricExporterProxy> {\n  constructor(config?: OTLPGRPCExporterConfigNode & OTLPMetricExporterOptions) {\n    super(new OTLPMetricExporterProxy(config), config);\n  }\n}\n"]}